# docker-compose.yml
# Complete self-hosted Helparr setup with optional Redis backend

version: '3.8'

services:
  helparr:
    image: jhick452/helparr:latest
    container_name: helparr
    restart: unless-stopped
    ports:
      - "${HELPARR_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Redis is optional - comment out REDIS_URL to use in-memory storage
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      # Optional: Add custom configuration
      - HELPARR_INSTANCE_NAME=${HELPARR_INSTANCE_NAME:-Helparr Self-Hosted}
      - HELPARR_ADMIN_EMAIL=${HELPARR_ADMIN_EMAIL:-admin@localhost}
      # Optional: TMDb health monitoring
      - TMDB_HEALTH_CHECK=${TMDB_HEALTH_CHECK:-false}
      # Optional: Demo API key for public instances
      - TMDB_DEMO_API_KEY=${TMDB_DEMO_API_KEY}
    volumes:
      - helparr_data:/app/data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      redis:
        condition: service_healthy
        required: false  # Redis is optional
    networks:
      - helparr_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.helparr.rule=Host(`helparr.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.helparr.tls=true"
      - "traefik.http.services.helparr.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis service (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: helparr_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAXMEMORY:-256mb} --maxmemory-policy ${REDIS_POLICY:-allkeys-lru}
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - helparr_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Security: don't expose Redis port externally by default
    # Uncomment if you need external Redis access
    # ports:
    #   - "6379:6379"
    profiles:
      - redis  # Use profiles to make Redis optional

  # Optional: Reverse proxy with automatic SSL
  traefik:
    image: traefik:v2.10
    container_name: helparr_traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@localhost}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - helparr_network
    profiles:
      - reverse-proxy

volumes:
  helparr_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HELPARR_DATA_PATH:-./data}
  redis_data:
    driver: local
  traefik_acme:
    driver: local

networks:
  helparr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---
# docker-compose.memory.yml
# Minimal setup using only in-memory storage (no Redis)

version: '3.8'

services:
  helparr:
    image: jhick452/helparr:latest
    container_name: helparr_memory
    restart: unless-stopped
    ports:
      - "${HELPARR_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # No REDIS_URL = in-memory storage mode
      - HELPARR_INSTANCE_NAME=${HELPARR_INSTANCE_NAME:-Helparr (Memory Mode)}
      - HELPARR_ADMIN_EMAIL=${HELPARR_ADMIN_EMAIL:-admin@localhost}
    volumes:
      - helparr_data_memory:/app/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  helparr_data_memory:
    driver: local

---
# docker-compose.redis.yml  
# Full setup with Redis for production use

version: '3.8'

services:
  helparr:
    image: jhick452/helparr:latest
    container_name: helparr_redis
    restart: unless-stopped
    ports:
      - "${HELPARR_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - REDIS_URL=redis://redis:6379
      - HELPARR_INSTANCE_NAME=${HELPARR_INSTANCE_NAME:-Helparr (Redis Mode)}
      - HELPARR_ADMIN_EMAIL=${HELPARR_ADMIN_EMAIL:-admin@localhost}
      - TMDB_HEALTH_CHECK=${TMDB_HEALTH_CHECK:-true}
    volumes:
      - helparr_data_redis:/app/data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - helparr_network

  redis:
    image: redis:7-alpine
    container_name: helparr_redis_db
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAXMEMORY:-512mb} --maxmemory-policy ${REDIS_POLICY:-allkeys-lru}
    volumes:
      - redis_data_prod:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - helparr_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  helparr_data_redis:
    driver: local
  redis_data_prod:
    driver: local

networks:
  helparr_network:
    driver: bridge
