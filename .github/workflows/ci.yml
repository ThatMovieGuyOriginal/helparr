name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting (if Prettier is configured)
        run: |
          if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
            npx prettier --check .
          else
            echo "Prettier not configured, skipping format check"
          fi

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run security scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          REDIS_URL=redis://localhost:6379
          TMDB_API_KEY=test_key_for_ci
          NEXT_PUBLIC_BASE_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Run backend-specific tests
        run: |
          if [ -f "jest.backend.config.js" ]; then
            npm test -- --config=jest.backend.config.js --coverage --watchAll=false
          else
            echo "Backend-specific test config not found, skipping"
          fi
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create build environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_BASE_URL=http://localhost:3000
          EOF

      - name: Build application
        run: npm run build

      - name: Test production build
        run: |
          npm start &
          PID=$!
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/api/health || exit 1
          
          # Clean up
          kill $PID

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application in background
        run: |
          cat > .env.local << EOF
          REDIS_URL=redis://localhost:6379
          NEXT_PUBLIC_BASE_URL=http://localhost:3000
          NODE_ENV=production
          EOF
          
          npm run build
          npm start &
          
          # Wait for application to start
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

      - name: Run integration tests
        run: |
          # Test API endpoints
          echo "Testing health endpoint..."
          curl -f http://localhost:3000/api/health | jq .
          
          echo "Testing demo search endpoint..."
          curl -f "http://localhost:3000/api/demo/search?query=Tom+Hanks" | jq .
          
          # Add more integration tests as needed
          echo "Integration tests completed successfully"

  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Build and start application
        run: |
          npm run build
          npm start &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          lhci autorun --collect.url=http://localhost:3000 --assert.assertions.performance=0.7 --assert.assertions.accessibility=0.9
        continue-on-error: true

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would trigger your staging deployment (Vercel preview, etc.)"
          # Add actual deployment commands here

  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, build-test]
    if: always()
    
    steps:
      - name: Check quality gate
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ Quality gate passed - all checks successful!"
          else
            echo "❌ Quality gate failed - some checks failed"
            echo "Lint: ${{ needs.lint-and-format.result }}"
            echo "Security: ${{ needs.security-scan.result }}"
            echo "Tests: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build-test.result }}"
            exit 1
          fi